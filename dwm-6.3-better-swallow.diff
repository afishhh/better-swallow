dwm-6.3 のみに存在: better-swallow-6.3.diff
dwm-6.3 のみに存在: compile_commands.json
dwm-6.3 のみに存在: config.h
dwm-6.3 のみに存在: drw.o
dwm-6.3 のみに存在: dwm
dwm-6.3 のみに存在: dwm-6.3-better-swallow.diff
diff -up dwm-6.3-orig/dwm.c dwm-6.3/dwm.c
--- dwm-6.3-orig/dwm.c	2024-05-23 21:33:22.872865929 +0200
+++ dwm-6.3/dwm.c	2024-05-24 00:08:11.311234962 +0200
@@ -49,7 +49,7 @@
 #define CLEANMASK(mask)         (mask & ~(numlockmask|LockMask) & (ShiftMask|ControlMask|Mod1Mask|Mod2Mask|Mod3Mask|Mod4Mask|Mod5Mask))
 #define INTERSECT(x,y,w,h,m)    (MAX(0, MIN((x)+(w),(m)->wx+(m)->ww) - MAX((x),(m)->wx)) \
                                * MAX(0, MIN((y)+(h),(m)->wy+(m)->wh) - MAX((y),(m)->wy)))
-#define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
+#define ISVISIBLE(C)            (C->nswallowed == 0 && (C->tags & C->mon->tagset[C->mon->seltags]))
 #define LENGTH(X)               (sizeof X / sizeof X[0])
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
@@ -93,6 +93,9 @@ struct Client {
 	int bw, oldbw;
 	unsigned int tags;
 	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;
+	// FIXME: Beware of crashes if the swallower is destroyed before the swallowed
+	Client *swallower;
+	int nswallowed;
 	Client *next;
 	Client *snext;
 	Monitor *mon;
@@ -260,6 +263,7 @@ static void (*handler[LASTEvent]) (XEven
 	[PropertyNotify] = propertynotify,
 	[UnmapNotify] = unmapnotify
 };
+static Atom swallow_atom;
 static Atom wmatom[WMLast], netatom[NetLast];
 static int running = 1;
 static Cur *cursor[CurLast];
@@ -400,6 +404,45 @@ arrangemon(Monitor *m)
 		m->lt[m->sellt]->arrange(m);
 }
 
+
+void
+copyclientpos(Client *dst, Client *src) {
+	dst->bw = src->bw;
+        resizeclient(dst, src->x, src->y, src->w, src->h);
+        dst->oldx = src->oldx;
+        dst->oldy = src->oldy;
+        dst->oldw = src->oldw;
+        dst->oldh = src->oldh;
+        dst->oldbw = src->oldbw;
+        dst->oldstate = src->oldstate;
+        dst->isfullscreen = src->isfullscreen;
+        dst->isfloating = src->isfloating;
+        dst->tags = src->tags;
+        dst->mon = src->mon;
+}
+
+void
+checkswallowed(Client *c) {
+	XTextProperty prop;
+	Window swallower;
+
+	XGetTextProperty(dpy, c->win, &prop, swallow_atom);
+
+	if(prop.value && sscanf((char*)prop.value, "swallower=%lu", &swallower) == 1) {
+		Client *sw = wintoclient(swallower);
+		c->swallower = sw;
+		if(sw) copyclientpos(c, sw);
+		++c->swallower->nswallowed;
+		Client *tmp = c->swallower->next;
+		c->swallower->next = c;
+		c->next = tmp;
+
+		tmp = c->swallower->snext;
+		c->swallower->snext = c;
+		c->snext = tmp;
+	}
+}
+
 void
 attach(Client *c)
 {
@@ -1052,6 +1095,7 @@ manage(Window w, XWindowAttributes *wa)
 	c->y = MAX(c->y, ((c->mon->by == c->mon->my) && (c->x + (c->w / 2) >= c->mon->wx)
 		&& (c->x + (c->w / 2) < c->mon->wx + c->mon->ww)) ? bh : c->mon->my);
 	c->bw = borderpx;
+	checkswallowed(c);
 
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
@@ -1066,8 +1110,10 @@ manage(Window w, XWindowAttributes *wa)
 		c->isfloating = c->oldstate = trans != None || c->isfixed;
 	if (c->isfloating)
 		XRaiseWindow(dpy, c->win);
-	attach(c);
-	attachstack(c);
+	if(!c->swallower) {
+		attach(c);
+		attachstack(c);
+	}
 	XChangeProperty(dpy, root, netatom[NetClientList], XA_WINDOW, 32, PropModeAppend,
 		(unsigned char *) &(c->win), 1);
 	XMoveResizeWindow(dpy, c->win, c->x + 2 * sw, c->y, c->w, c->h); /* some windows require this */
@@ -1077,7 +1123,8 @@ manage(Window w, XWindowAttributes *wa)
 	c->mon->sel = c;
 	arrange(c->mon);
 	XMapWindow(dpy, c->win);
-	focus(NULL);
+	if(c->swallower && c->nswallowed == 1) focus(c);
+	else focus(NULL);
 }
 
 void
@@ -1566,6 +1613,7 @@ setup(void)
 	netatom[NetWMWindowType] = XInternAtom(dpy, "_NET_WM_WINDOW_TYPE", False);
 	netatom[NetWMWindowTypeDialog] = XInternAtom(dpy, "_NET_WM_WINDOW_TYPE_DIALOG", False);
 	netatom[NetClientList] = XInternAtom(dpy, "_NET_CLIENT_LIST", False);
+	swallow_atom = XInternAtom(dpy, "_BETTER_SWALLOW", False);
 	/* init cursors */
 	cursor[CurNormal] = drw_cur_create(drw, XC_left_ptr);
 	cursor[CurResize] = drw_cur_create(drw, XC_sizing);
@@ -1583,6 +1631,8 @@ setup(void)
 		PropModeReplace, (unsigned char *) &wmcheckwin, 1);
 	XChangeProperty(dpy, wmcheckwin, netatom[NetWMName], utf8string, 8,
 		PropModeReplace, (unsigned char *) "dwm", 3);
+	XChangeProperty(dpy, root, swallow_atom, utf8string, 8,
+		PropModeReplace, (unsigned char *) "supported", 9);
 	XChangeProperty(dpy, root, netatom[NetWMCheck], XA_WINDOW, 32,
 		PropModeReplace, (unsigned char *) &wmcheckwin, 1);
 	/* EWMH support per view */
@@ -1771,9 +1821,21 @@ unmanage(Client *c, int destroyed)
 	Monitor *m = c->mon;
 	XWindowChanges wc;
 
+	if(c->swallower && --c->swallower->nswallowed == 0) {
+		detach(c->swallower);
+		detachstack(c->swallower);
+
+		c->swallower->next = c->next;
+		c->next = c->swallower;
+		c->swallower->snext = c->snext;
+		c->snext = c->swallower;
+
+		copyclientpos(c->swallower, c);
+	}
+
 	detach(c);
 	detachstack(c);
-	if (!destroyed) {
+	if (destroyed) {
 		wc.border_width = c->oldbw;
 		XGrabServer(dpy); /* avoid race conditions */
 		XSetErrorHandler(xerrordummy);
@@ -1784,8 +1846,9 @@ unmanage(Client *c, int destroyed)
 		XSetErrorHandler(xerror);
 		XUngrabServer(dpy);
 	}
+	if(c->swallower) focus(c->swallower);
+	else focus(NULL);
 	free(c);
-	focus(NULL);
 	updateclientlist();
 	arrange(m);
 }
dwm-6.3 のみに存在: dwm.o
dwm-6.3 のみに存在: util.o
